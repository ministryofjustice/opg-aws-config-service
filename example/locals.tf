locals {
  rules                  = jsondecode(file("${path.module}/rules.json"))
  aggregate_organization = false

  default_tags = {
    default-tag = "A Tag"
  }
  // List of all the standard AWS rules to choose from (not used in this example as many need parameters)
  full_list_of_rules = {
    access-keys-rotated = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "access-keys-rotated",
      parameters = jsonencode({
        maxAccessKeyAge = ""
      }),
      source_identifier = "ACCESS_KEYS_ROTATED",
    },
    acm-certificate-expiration-check = {
      description = "Config rule, generated by terraform",
      name        = "acm-certificate-expiration-check",
      parameters = jsonencode({
        daysToExpiration = ""
      }),
      source_identifier = "ACM_CERTIFICATE_EXPIRATION_CHECK",
    },
    alb-http-to-https-redirection-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "alb-http-to-https-redirection-check",
      parameters        = "",
      source_identifier = "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK",
    },
    api-gw-cache-enabled-and-encrypted = {
      description       = "Config rule, generated by terraform",
      name              = "api-gw-cache-enabled-and-encrypted",
      parameters        = "",
      source_identifier = "API_GW_CACHE_ENABLED_AND_ENCRYPTED",
    },
    api-gw-endpoint-type-check = {
      description = "Config rule, generated by terraform",
      name        = "api-gw-endpoint-type-check",
      parameters = jsonencode({
        endpointConfigurationTypes = ""
      }),
      source_identifier = "API_GW_ENDPOINT_TYPE_CHECK",
    },
    api-gw-execution-logging-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "api-gw-execution-logging-enabled",
      parameters        = "{}",
      source_identifier = "API_GW_EXECUTION_LOGGING_ENABLED",
    },
    approved-amis-by-id = {
      description = "Config rule, generated by terraform",
      name        = "approved-amis-by-id",
      parameters = jsonencode({
        amiIds = ""
      }),
      source_identifier = "APPROVED_AMIS_BY_ID",
    },
    approved-amis-by-tag = {
      description = "Config rule, generated by terraform",
      name        = "approved-amis-by-tag",
      parameters = jsonencode({
        amisByTagKeyAndValue = ""
      }),
      source_identifier = "APPROVED_AMIS_BY_TAG",
    },
    autoscaling-group-elb-healthcheck-required = {
      description       = "Config rule, generated by terraform",
      name              = "autoscaling-group-elb-healthcheck-required",
      parameters        = "",
      source_identifier = "AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED",
    },
    cloud-trail-cloud-watch-logs-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloud-trail-cloud-watch-logs-enabled",
      parameters        = "",
      source_identifier = "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED",
    },
    cloud-trail-encryption-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloud-trail-encryption-enabled",
      parameters        = "",
      source_identifier = "CLOUD_TRAIL_ENCRYPTION_ENABLED",
    },
    cloud-trail-log-file-validation-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloud-trail-log-file-validation-enabled",
      parameters        = "",
      source_identifier = "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED",
    },
    cloudformation-stack-drift-detection-check = {
      description = "Config rule, generated by terraform",
      name        = "cloudformation-stack-drift-detection-check",
      parameters = jsonencode({
        cloudformationRoleArn = ""
      }),
      source_identifier = "CLOUDFORMATION_STACK_DRIFT_DETECTION_CHECK",
    },
    cloudformation-stack-notification-check = {
      description       = "Config rule, generated by terraform",
      name              = "cloudformation-stack-notification-check",
      parameters        = "",
      source_identifier = "CLOUDFORMATION_STACK_NOTIFICATION_CHECK",
    },
    cloudfront-viewer-policy-https = {
      description       = "Config rule, generated by terraform",
      name              = "cloudfront-viewer-policy-https",
      parameters        = "",
      source_identifier = "CLOUDFRONT_VIEWER_POLICY_HTTPS",
    },
    cloudtrail-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloudtrail-enabled",
      parameters        = "{}",
      source_identifier = "CLOUD_TRAIL_ENABLED",
    },
    cloudwatch-alarm-action-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "cloudwatch-alarm-action-check",
      parameters = jsonencode({
        alarmActionRequired            = "true"
        insufficientDataActionRequired = "true",
        okActionRequired               = "true"
      }),
      source_identifier = "CLOUDWATCH_ALARM_ACTION_CHECK",
    },
    cloudwatch-log-group-encrypted = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloudwatch-log-group-encrypted",
      parameters        = "{}",
      source_identifier = "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
    },
    cmk-backing-key-rotation-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "cmk-backing-key-rotation-enabled",
      parameters        = "",
      source_identifier = "CMK_BACKING_KEY_ROTATION_ENABLED",
    },
    codebuild-project-envvar-awscred-check = {
      description       = "Config rule, generated by terraform",
      name              = "codebuild-project-envvar-awscred-check",
      parameters        = "",
      source_identifier = "CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK",
    },
    codebuild-project-source-repo-url-check = {
      description       = "Config rule, generated by terraform",
      name              = "codebuild-project-source-repo-url-check",
      parameters        = "",
      source_identifier = "CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK",
    },
    codepipeline-deployment-count-check = {
      description = "Config rule, generated by terraform",
      name        = "codepipeline-deployment-count-check",
      parameters = jsonencode({
        deploymentLimit = ""
      }),
      source_identifier = "CODEPIPELINE_DEPLOYMENT_COUNT_CHECK",
    },
    codepipeline-region-fanout-check = {
      description = "Config rule, generated by terraform",
      name        = "codepipeline-region-fanout-check",
      parameters = jsonencode({
        regionFanoutFactor = ""
      }),
      source_identifier = "CODEPIPELINE_REGION_FANOUT_CHECK",
    },
    db-instance-backup-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "db-instance-backup-enabled",
      parameters        = "{}",
      source_identifier = "DB_INSTANCE_BACKUP_ENABLED",
    },
    desired-instance-tenancy = {
      description = "Config rule, generated by terraform",
      name        = "desired-instance-tenancy",
      parameters = jsonencode({
        hostId  = "",
        imageId = "",
        tenancy = ""
      }),
      source_identifier = "DESIRED_INSTANCE_TENANCY",
    },
    desired-instance-type = {
      description = "Config rule, generated by terraform",
      name        = "desired-instance-type",
      parameters = jsonencode({
        instanceType = ""
      }),
      source_identifier = "DESIRED_INSTANCE_TYPE",
    },
    dms-replication-not-public = {
      description       = "Config rule, generated by terraform",
      name              = "dms-replication-not-public",
      parameters        = "",
      source_identifier = "DMS_REPLICATION_NOT_PUBLIC",
    },
    dynamodb-autoscaling-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "dynamodb-autoscaling-enabled",
      parameters        = "",
      source_identifier = "DYNAMODB_AUTOSCALING_ENABLED",
    },
    dynamodb-table-encryption-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "dynamodb-table-encryption-enabled",
      parameters        = "",
      source_identifier = "DYNAMODB_TABLE_ENCRYPTION_ENABLED",
    },
    dynamodb-throughput-limit-check = {
      description       = "Config rule, generated by terraform",
      name              = "dynamodb-throughput-limit-check",
      parameters        = "",
      source_identifier = "DYNAMODB_THROUGHPUT_LIMIT_CHECK",
    },
    ebs-optimized-instance = {
      description       = "Config rule, generated by terraform",
      name              = "ebs-optimized-instance",
      parameters        = "",
      source_identifier = "EBS_OPTIMIZED_INSTANCE",
    },
    ebs-snapshot-public-restorable-check = {
      description       = "Config rule, generated by terraform",
      name              = "ebs-snapshot-public-restorable-check",
      parameters        = "",
      source_identifier = "EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK",
    },
    ec2-instance-detailed-monitoring-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "ec2-instance-detailed-monitoring-enabled",
      parameters        = "",
      source_identifier = "EC2_INSTANCE_DETAILED_MONITORING_ENABLED",
    },
    ec2-instance-no-public-ip = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "ec2-instance-no-public-ip",
      parameters        = "",
      source_identifier = "EC2_INSTANCE_NO_PUBLIC_IP",
    },
    ec2-instances-in-vpc = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "ec2-instances-in-vpc",
      parameters        = "",
      source_identifier = "INSTANCES_IN_VPC",
    },
    ec2-managedinstance-applications-blacklisted = {
      description       = "Config rule, generated by terraform",
      name              = "ec2-managedinstance-applications-blacklisted",
      parameters        = "",
      source_identifier = "EC2_MANAGEDINSTANCE_APPLICATIONS_BLACKLISTED",
    },
    ec2-managedinstance-applications-required = {
      description       = "Config rule, generated by terraform",
      name              = "ec2-managedinstance-applications-required",
      parameters        = "",
      source_identifier = "EC2_MANAGEDINSTANCE_APPLICATIONS_REQUIRED",
    },
    ec2-managedinstance-association-compliance-status-check = {
      description       = "Config rule, generated by terraform",
      name              = "ec2-managedinstance-association-compliance-status-check",
      parameters        = "",
      source_identifier = "EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK",
    },
    ec2-managedinstance-inventory-blacklisted = {
      description = "Config rule, generated by terraform",
      name        = "ec2-managedinstance-inventory-blacklisted",
      parameters = jsonencode({
        inventoryNames = "",
        platformType   = ""
      }),
      source_identifier = "EC2_MANAGEDINSTANCE_INVENTORY_BLACKLISTED",
    },
    ec2-managedinstance-patch-compliance-status-check = {
      description       = "Config rule, generated by terraform",
      name              = "ec2-managedinstance-patch-compliance-status-check",
      parameters        = "",
      source_identifier = "EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK",
    },
    ec2-managedinstance-platform-check = {
      description = "Config rule, generated by terraform",
      name        = "ec2-managedinstance-platform-check",
      parameters = jsonencode({
        agentVersion    = "",
        platformType    = "",
        platformVersion = ""
      }),
      source_identifier = "EC2_MANAGEDINSTANCE_PLATFORM_CHECK",
    },
    ec2-security-group-attached-to-eni = {
      description       = "Config rule, generated by terraform",
      name              = "ec2-security-group-attached-to-eni",
      parameters        = "",
      source_identifier = "EC2_SECURITY_GROUP_ATTACHED_TO_ENI",
    },
    ec2-stopped-instance = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "ec2-stopped-instance",
      parameters = jsonencode({
        AllowedDays = "5"
      }),
      source_identifier = "EC2_STOPPED_INSTANCE",
    },
    ec2-volume-inuse-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "ec2-volume-inuse-check",
      parameters        = "",
      source_identifier = "EC2_VOLUME_INUSE_CHECK",
    },
    efs-encrypted-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "efs-encrypted-check",
      parameters        = "",
      source_identifier = "EFS_ENCRYPTED_CHECK",
    },
    eip-attached = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "eip-attached",
      parameters        = "",
      source_identifier = "EIP_ATTACHED",
    },
    elasticache-redis-cluster-automatic-backup-check = {
      description       = "Config rule, generated by terraform",
      name              = "elasticache-redis-cluster-automatic-backup-check",
      parameters        = "",
      source_identifier = "ELASTICACHE_REDIS_CLUSTER_AUTOMATIC_BACKUP_CHECK",
    },
    elasticsearch-encrypted-at-rest = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elasticsearch-encrypted-at-rest",
      parameters        = "",
      source_identifier = "ELASTICSEARCH_ENCRYPTED_AT_REST",
    },
    elasticsearch-in-vpc-only = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elasticsearch-in-vpc-only",
      parameters        = "",
      source_identifier = "ELASTICSEARCH_IN_VPC_ONLY",
    },
    elb-acm-certificate-required = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elb-acm-certificate-required",
      parameters        = "",
      source_identifier = "ELB_ACM_CERTIFICATE_REQUIRED",
    },
    elb-deletion-protection-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elb-deletion-protection-enabled",
      parameters        = "",
      source_identifier = "ELB_DELETION_PROTECTION_ENABLED",
    },
    elb-logging-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elb-logging-enabled",
      parameters        = "{}",
      source_identifier = "ELB_LOGGING_ENABLED",
    },
    elb-predefined-security-policy-ssl-check = {
      description       = "Config rule, generated by terraform",
      name              = "elb-predefined-security-policy-ssl-check",
      parameters        = "",
      source_identifier = "ELB_PREDEFINED_SECURITY_POLICY_SSL_CHECK",
    },
    emr-kerberos-enabled = {
      description = "Config rule, generated by terraform",
      name        = "emr-kerberos-enabled",
      parameters = jsonencode({
        adminServer           = "",
        domain                = "",
        kdcServer             = "",
        realm                 = "",
        ticketLifetimeInHours = ""
      }),
      source_identifier = "EMR_KERBEROS_ENABLED",
    },
    emr-master-no-public-ip = {
      description       = "Config rule, generated by terraform",
      name              = "emr-master-no-public-ip",
      parameters        = "",
      source_identifier = "EMR_MASTER_NO_PUBLIC_IP",
    },
    encrypted-volumes = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "encrypted-volumes",
      parameters        = "",
      source_identifier = "ENCRYPTED_VOLUMES",
    },
    fms-security-group-audit-policy-check = {
      description = "Config rule, generated by terraform",
      name        = "fms-security-group-audit-policy-check",
      parameters = jsonencode({
        allowSecurityGroup      = ""
        excludeResourceTags     = "",
        fmsRemediationEnabled   = "",
        inScope                 = "",
        masterSecurityGroupsIds = "",
        resourceTags            = "",
        resourceTypes           = ""
      }),
      source_identifier = "FMS_SECURITY_GROUP_AUDIT_POLICY_CHECK",
    },
    fms-security-group-content-check = {
      description = "Config rule, generated by terraform",
      name        = "fms-security-group-content-check",
      parameters = jsonencode({
        allowSecurityGroup    = "",
        fmsRemediationEnabled = "",
        securityGroupsIds     = "",
        vpcIds                = ""
      }),
      source_identifier = "FMS_SECURITY_GROUP_CONTENT_CHECK",
    },
    fms-security-group-resource-association-check = {
      description = "Config rule, generated by terraform",
      name        = "fms-security-group-resource-association-check",
      parameters = jsonencode({
        excludeResourceTags   = "",
        fmsRemediationEnabled = "",
        resourceTags          = "",
        resourceTypes         = "",
        securityGroupsIds     = "",
        vpcIds                = ""
      }),
      source_identifier = "FMS_SECURITY_GROUP_RESOURCE_ASSOCIATION_CHECK",
    },
    fms-shield-resource-policy-check = {
      description = "Config rule, generated by terraform",
      name        = "fms-shield-resource-policy-check",
      parameters = jsonencode({
        excludeResourceTags   = "",
        fmsManagedToken       = "",
        fmsRemediationEnabled = "",
        resourceTags          = "",
        webACLId              = ""
      }),
      source_identifier = "FMS_SHIELD_RESOURCE_POLICY_CHECK",
    },
    fms-webacl-resource-policy-check = {
      description = "Config rule, generated by terraform",
      name        = "fms-webacl-resource-policy-check",
      parameters = jsonencode({
        excludeResourceTags   = "",
        fmsManagedToken       = "",
        fmsRemediationEnabled = "",
        resourceTags          = "",
        webACLId              = ""
      }),
      source_identifier = "FMS_WEBACL_RESOURCE_POLICY_CHECK",
    },
    fms-webacl-rulegroup-association-check = {
      description = "Config rule, generated by terraform",
      name        = "fms-webacl-rulegroup-association-check",
      parameters = jsonencode({
        fmsManagedToken       = "",
        fmsRemediationEnabled = "",
        ruleGroups            = ""
      }),
      source_identifier = "FMS_WEBACL_RULEGROUP_ASSOCIATION_CHECK",
    },
    guardduty-enabled-centralized = {
      description = "Config rule, generated by terraform",
      name        = "guardduty-enabled-centralized",
      parameters = jsonencode({
        CentralMonitoringAccount = ""
      }),
      source_identifier = "GUARDDUTY_ENABLED_CENTRALIZED",
    },
    guardduty-non-archived-findings = {
      description       = "Config rule, generated by terraform",
      name              = "guardduty-non-archived-findings",
      parameters        = "",
      source_identifier = "GUARDDUTY_NON_ARCHIVED_FINDINGS",
    },
    iam-group-has-users-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-group-has-users-check",
      parameters        = "",
      source_identifier = "IAM_GROUP_HAS_USERS_CHECK",
    },
    iam-password-policy = {
      description = "Config rule, generated by terraform",
      name        = "iam-password-policy",
      parameters = jsonencode({
        MaxPasswordAge             = ""
        MinimumPasswordLength      = "",
        PasswordReusePrevention    = "",
        RequireLowercaseCharacters = "",
        RequireNumbers             = "",
        RequireSymbols             = "",
        RequireUppercaseCharacters = ""
      }),
      source_identifier = "IAM_PASSWORD_POLICY",
    },
    iam-policy-blacklisted-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "iam-policy-blacklisted-check",
      parameters = jsonencode({
        exceptionList = ""
      }),
      source_identifier = "IAM_POLICY_BLACKLISTED_CHECK",
    },
    iam-policy-no-statements-with-admin-access = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-policy-no-statements-with-admin-access",
      parameters        = "",
      source_identifier = "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS",
    },
    iam-role-managed-policy-check = {
      description = "Config rule, generated by terraform",
      name        = "iam-role-managed-policy-check",
      parameters = jsonencode({
        managedPolicyNames = ""
      }),
      source_identifier = "IAM_ROLE_MANAGED_POLICY_CHECK",
    },
    iam-root-access-key-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-root-access-key-check",
      parameters        = "",
      source_identifier = "IAM_ROOT_ACCESS_KEY_CHECK",
    },
    iam-user-mfa-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-user-mfa-enabled",
      parameters        = "",
      source_identifier = "IAM_USER_MFA_ENABLED",
    },
    iam-user-no-policies-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-user-no-policies-check",
      parameters        = "",
      source_identifier = "IAM_USER_NO_POLICIES_CHECK",
    },
    iam-user-unused-credentials-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "iam-user-unused-credentials-check",
      parameters = jsonencode({
        maxCredentialUsageAge = ""
      }),
      source_identifier = "IAM_USER_UNUSED_CREDENTIALS_CHECK",
    },
    internet-gateway-authorized-vpc-only = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "internet-gateway-authorized-vpc-only",
      parameters = jsonencode({
        AuthorizedVpcIds = ""
      }),
      source_identifier = "INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY",
    },
    kms-cmk-not-scheduled-for-deletion = {
      description = "Config rule, generated by terraform",
      name        = "kms-cmk-not-scheduled-for-deletion",
      parameters = jsonencode({
        kmsKeyIds = ""
      }),
      source_identifier = "KMS_CMK_NOT_SCHEDULED_FOR_DELETION",
    },
    lambda-concurrency-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "lambda-concurrency-check",
      parameters = jsonencode({
        ConcurrencyLimitHigh = "",
        ConcurrencyLimitLow  = ""
      }),
      source_identifier = "LAMBDA_CONCURRENCY_CHECK",
    },
    lambda-dlq-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "lambda-dlq-check",
      parameters        = "{}",
      source_identifier = "LAMBDA_DLQ_CHECK",
    },
    lambda-function-public-access-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "lambda-function-public-access-prohibited",
      parameters        = "",
      source_identifier = "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED",
    },
    lambda-function-settings-check = {
      description = "Config rule, generated by terraform",
      name        = "lambda-function-settings-check",
      parameters = jsonencode({
        memorySize = "",
        role       = "",
        runtime    = "",
        timeout    = ""
      }),
      source_identifier = "LAMBDA_FUNCTION_SETTINGS_CHECK",
    },
    lambda-inside-vpc = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "lambda-inside-vpc",
      parameters        = "{}",
      source_identifier = "LAMBDA_INSIDE_VPC",
    },
    mfa-enabled-for-iam-console-access = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "mfa-enabled-for-iam-console-access",
      parameters        = "",
      source_identifier = "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS",
    },
    multi-region-cloud-trail-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "multi-region-cloud-trail-enabled",
      parameters        = "",
      source_identifier = "MULTI_REGION_CLOUD_TRAIL_ENABLED",
    },
    rds-enhanced-monitoring-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-enhanced-monitoring-enabled",
      parameters        = "",
      source_identifier = "RDS_ENHANCED_MONITORING_ENABLED",
    },
    rds-instance-public-access-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-instance-public-access-check",
      parameters        = "",
      source_identifier = "RDS_INSTANCE_PUBLIC_ACCESS_CHECK",
    },
    rds-multi-az-support = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-multi-az-support",
      parameters        = "",
      source_identifier = "RDS_MULTI_AZ_SUPPORT",
    },
    rds-snapshots-public-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-snapshots-public-prohibited",
      parameters        = "",
      source_identifier = "RDS_SNAPSHOTS_PUBLIC_PROHIBITED",
    },
    rds-storage-encrypted = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-storage-encrypted",
      parameters        = "{}",
      source_identifier = "RDS_STORAGE_ENCRYPTED",
    },
    redshift-cluster-configuration-check = {
      description = "Config rule, generated by terraform",
      name        = "redshift-cluster-configuration-check",
      parameters = jsonencode({
        clusterDbEncrypted = "",
        loggingEnabled     = "",
        nodeTypes          = ""
      }),
      source_identifier = "REDSHIFT_CLUSTER_CONFIGURATION_CHECK",
    },
    redshift-cluster-maintenancesettings-check = {
      description = "Config rule, generated by terraform",
      name        = "redshift-cluster-maintenancesettings-check",
      parameters = jsonencode({
        allowVersionUpgrade              = "",
        automatedSnapshotRetentionPeriod = "",
        preferredMaintenanceWindow       = ""
      }),
      source_identifier = "REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK",
    },
    redshift-cluster-public-access-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "redshift-cluster-public-access-check",
      parameters        = "",
      source_identifier = "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK",
    },
    required-tags = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "required-tags",
      parameters = jsonencode({
        tag1Key = "business-unit",
        tag2Key = "application",
        tag3Key = "environment-name",
        tag4Key = "owner",
        tag5Key = "is-production"
      }),
      source_identifier = "REQUIRED_TAGS",
    },
    restricted-common-ports = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "restricted-common-ports",
      parameters = jsonencode({
        blockedPort1 = "",
        blockedPort2 = "",
        blockedPort3 = ""
      }),
      source_identifier = "RESTRICTED_INCOMING_TRAFFIC",
    },
    restricted-ssh = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "restricted-ssh",
      parameters        = "",
      source_identifier = "INCOMING_SSH_DISABLED",
    },
    root-account-hardware-mfa-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "root-account-hardware-mfa-enabled",
      parameters        = "",
      source_identifier = "ROOT_ACCOUNT_HARDWARE_MFA_ENABLED",
    },
    root-account-mfa-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "root-account-mfa-enabled",
      parameters        = "",
      source_identifier = "ROOT_ACCOUNT_MFA_ENABLED",
    },
    s3-account-level-public-access-blocks = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-account-level-public-access-blocks",
      parameters        = "",
      source_identifier = "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS",
    },
    s3-bucket-blacklisted-actions-prohibited = {
      description = "Config rule, generated by terraform",
      name        = "s3-bucket-blacklisted-actions-prohibited",
      parameters = jsonencode({
        blacklistedactionpatterns = ""
      }),
      source_identifier = "S3_BUCKET_BLACKLISTED_ACTIONS_PROHIBITED",
    },
    s3-bucket-logging-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-logging-enabled",
      parameters        = "{}",
      source_identifier = "S3_BUCKET_LOGGING_ENABLED",
    },
    s3-bucket-policy-grantee-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "s3-bucket-policy-grantee-check",
      parameters = jsonencode({
        awsPrincipals     = "",
        federatedUsers    = "",
        ipAddresses       = "",
        servicePrincipals = "",
        vpcIds            = ""
      }),
      source_identifier = "S3_BUCKET_POLICY_GRANTEE_CHECK",
    },
    s3-bucket-policy-not-more-permissive = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "s3-bucket-policy-not-more-permissive",
      parameters = jsonencode({
        controlPolicy = ""
      }),
      source_identifier = "S3_BUCKET_POLICY_NOT_MORE_PERMISSIVE",
    },
    s3-bucket-public-read-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-public-read-prohibited",
      parameters        = "",
      source_identifier = "S3_BUCKET_PUBLIC_READ_PROHIBITED",
    },
    s3-bucket-public-write-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-public-write-prohibited",
      parameters        = "",
      source_identifier = "S3_BUCKET_PUBLIC_WRITE_PROHIBITED",
    },
    s3-bucket-replication-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "s3-bucket-replication-enabled",
      parameters        = "",
      source_identifier = "S3_BUCKET_REPLICATION_ENABLED",
    },
    s3-bucket-server-side-encryption-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-server-side-encryption-enabled",
      parameters        = "",
      source_identifier = "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED",
    },
    s3-bucket-ssl-requests-only = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-ssl-requests-only",
      parameters        = "",
      source_identifier = "S3_BUCKET_SSL_REQUESTS_ONLY",
    },
    s3-bucket-versioning-enabled = {
      description       = "Config rule, generated by terraform",
      name              = "s3-bucket-versioning-enabled",
      parameters        = "{}",
      source_identifier = "S3_BUCKET_VERSIONING_ENABLED",
    },
    sagemaker-endpoint-configuration-kms-key-configured = {
      description       = "Config rule, generated by terraform",
      name              = "sagemaker-endpoint-configuration-kms-key-configured",
      parameters        = "",
      source_identifier = "SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED",
    },
    sagemaker-notebook-kms-configured = {
      description = "Config rule, generated by terraform",
      name        = "sagemaker-notebook-kms-configured",
      parameters = jsonencode({
        keyArns = ""
      }),
      source_identifier = "SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED",
    },
    sagemaker-notebook-no-direct-internet-access = {
      description       = "Config rule, generated by terraform",
      name              = "sagemaker-notebook-no-direct-internet-access",
      parameters        = "",
      source_identifier = "SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS",
    },
    secretsmanager-rotation-enabled-check = {
      description       = "Config rule, generated by terraform",
      name              = "secretsmanager-rotation-enabled-check",
      parameters        = "{}",
      source_identifier = "SECRETSMANAGER_ROTATION_ENABLED_CHECK",
    },
    secretsmanager-scheduled-rotation-success-check = {
      description       = "Config rule, generated by terraform",
      name              = "secretsmanager-scheduled-rotation-success-check",
      parameters        = "",
      source_identifier = "SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK",
    },
    service-vpc-endpoint-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "service-vpc-endpoint-enabled",
      parameters        = "",
      source_identifier = "SERVICE_VPC_ENDPOINT_ENABLED",
    },
    shield-advanced-enabled-autorenew = {
      description       = "Config rule, generated by terraform",
      name              = "shield-advanced-enabled-autorenew",
      parameters        = "",
      source_identifier = "SHIELD_ADVANCED_ENABLED_AUTORENEW",
    },
    shield-drt-access = {
      description       = "Config rule, generated by terraform",
      name              = "shield-drt-access",
      parameters        = "",
      source_identifier = "SHIELD_DRT_ACCESS",
    },
    vpc-default-security-group-closed = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "vpc-default-security-group-closed",
      parameters        = "",
      source_identifier = "VPC_DEFAULT_SECURITY_GROUP_CLOSED",
    },
    vpc-flow-logs-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "vpc-flow-logs-enabled",
      parameters = jsonencode({
        trafficType = ""
      }),
      source_identifier = "VPC_FLOW_LOGS_ENABLED",
    },
    vpc-sg-open-only-to-authorized-ports = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "vpc-sg-open-only-to-authorized-ports",
      parameters = jsonencode({
        authorizedTcpPorts = ""
      }),
      source_identifier = "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS",
    },
    vpc-vpn-2-tunnels-up = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "vpc-vpn-2-tunnels-up",
      parameters        = "",
      source_identifier = "VPC_VPN_2_TUNNELS_UP",
    },
  }
}
