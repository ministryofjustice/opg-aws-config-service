locals {
  rules                  = jsondecode(file("${path.module}/rules.json"))
  aggregate_organization = false

  default_tags = {
    default-tag = "A Tag"
  }
  // List of all the standard AWS rules to choose from (not used in this example as many need parameters)
  full_list_of_rules = {
    access-keys-rotated = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "access-keys-rotated",
      parameters = jsonencode({
        maxAccessKeyAge = "90"
      }),
      source_identifier = "ACCESS_KEYS_ROTATED"
    },
    alb-http-to-https-redirection-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "alb-http-to-https-redirection-check",
      parameters        = "",
      source_identifier = "ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK"
    },
    cloud-trail-cloud-watch-logs-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloud-trail-cloud-watch-logs-enabled",
      parameters        = "",
      source_identifier = "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED"
    },
    cloud-trail-encryption-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloud-trail-encryption-enabled",
      parameters        = "",
      source_identifier = "CLOUD_TRAIL_ENCRYPTION_ENABLED"
    },
    cloud-trail-log-file-validation-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloud-trail-log-file-validation-enabled",
      parameters        = "",
      source_identifier = "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED"
    },
    dynamodb-table-encryption-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "dynamodb-table-encryption-enabled",
      parameters        = "",
      source_identifier = "DYNAMODB_TABLE_ENCRYPTION_ENABLED"
    },
    ec2-instances-in-vpc = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "ec2-instances-in-vpc",
      parameters        = "",
      source_identifier = "INSTANCES_IN_VPC"
    },
    ec2-stopped-instance = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "ec2-stopped-instance",
      parameters = jsonencode({
        AllowedDays = "5"
      }),
      source_identifier = "EC2_STOPPED_INSTANCE"
    },
    ec2-volume-inuse-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "ec2-volume-inuse-check",
      parameters        = "",
      source_identifier = "EC2_VOLUME_INUSE_CHECK"
    },
    efs-encrypted-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "efs-encrypted-check",
      parameters        = "",
      source_identifier = "EFS_ENCRYPTED_CHECK"
    },
    eip-attached = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "eip-attached",
      parameters        = "",
      source_identifier = "EIP_ATTACHED"
    },
    elasticsearch-encrypted-at-rest = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elasticsearch-encrypted-at-rest",
      parameters        = "",
      source_identifier = "ELASTICSEARCH_ENCRYPTED_AT_REST"
    },
    elasticsearch-in-vpc-only = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elasticsearch-in-vpc-only",
      parameters        = "",
      source_identifier = "ELASTICSEARCH_IN_VPC_ONLY"
    },
    encrypted-volumes = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "encrypted-volumes",
      parameters        = "",
      source_identifier = "ENCRYPTED_VOLUMES"
    },
    iam-group-has-users-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-group-has-users-check",
      parameters        = "",
      source_identifier = "IAM_GROUP_HAS_USERS_CHECK"
    },
    iam-root-access-key-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-root-access-key-check",
      parameters        = "",
      source_identifier = "IAM_ROOT_ACCESS_KEY_CHECK"
    },
    iam-user-mfa-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-user-mfa-enabled",
      parameters        = "",
      source_identifier = "IAM_USER_MFA_ENABLED"
    },
    iam-user-no-policies-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-user-no-policies-check",
      parameters        = "",
      source_identifier = "IAM_USER_NO_POLICIES_CHECK"
    },
    iam-user-unused-credentials-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "iam-user-unused-credentials-check",
      parameters = jsonencode({
        maxCredentialUsageAge = "5"
      }),
      source_identifier = "IAM_USER_UNUSED_CREDENTIALS_CHECK"
    },
    lambda-function-public-access-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "lambda-function-public-access-prohibited",
      parameters        = "",
      source_identifier = "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
    },
    mfa-enabled-for-iam-console-access = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "mfa-enabled-for-iam-console-access",
      parameters        = "",
      source_identifier = "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
    },
    multi-region-cloud-trail-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "multi-region-cloud-trail-enabled",
      parameters        = "",
      source_identifier = "MULTI_REGION_CLOUD_TRAIL_ENABLED"
    },
    rds-instance-public-access-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-instance-public-access-check",
      parameters        = "",
      source_identifier = "RDS_INSTANCE_PUBLIC_ACCESS_CHECK"
    },
    rds-multi-az-support = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-multi-az-support",
      parameters        = "",
      source_identifier = "RDS_MULTI_AZ_SUPPORT"
    },
    rds-snapshots-public-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-snapshots-public-prohibited",
      parameters        = "",
      source_identifier = "RDS_SNAPSHOTS_PUBLIC_PROHIBITED"
    },
    redshift-cluster-public-access-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "redshift-cluster-public-access-check",
      parameters        = "",
      source_identifier = "REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK"
    },
    required-tags = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "required-tags",
      parameters = jsonencode({
        tag1Key = "business-unit",
        tag2Key = "application",
        tag3Key = "environment-name",
        tag4Key = "owner",
        tag5Key = "is-production"
      }),
      source_identifier = "REQUIRED_TAGS"
    },
    restricted-ssh = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "restricted-ssh",
      parameters        = "",
      source_identifier = "INCOMING_SSH_DISABLED"
    },
    root-account-mfa-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "root-account-mfa-enabled",
      parameters        = "",
      source_identifier = "ROOT_ACCOUNT_MFA_ENABLED"
    },
    s3-account-level-public-access-blocks = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-account-level-public-access-blocks",
      parameters        = "",
      source_identifier = "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS"
    },
    s3-bucket-public-read-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-public-read-prohibited",
      parameters        = "",
      source_identifier = "S3_BUCKET_PUBLIC_READ_PROHIBITED"
    },
    s3-bucket-public-write-prohibited = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-public-write-prohibited",
      parameters        = "",
      source_identifier = "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
    },
    s3-bucket-server-side-encryption-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-server-side-encryption-enabled",
      parameters        = "",
      source_identifier = "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
    },
    s3-bucket-ssl-requests-only = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "s3-bucket-ssl-requests-only",
      parameters        = "",
      source_identifier = "S3_BUCKET_SSL_REQUESTS_ONLY"
    },
    vpc-default-security-group-closed = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "vpc-default-security-group-closed",
      parameters        = "",
      source_identifier = "VPC_DEFAULT_SECURITY_GROUP_CLOSED"
    },
    vpc-flow-logs-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "vpc-flow-logs-enabled",
      parameters = jsonencode({
        trafficType = "ALL"
      }),
      source_identifier = "VPC_FLOW_LOGS_ENABLED"
    },
    vpc-sg-open-only-to-authorized-ports = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "vpc-sg-open-only-to-authorized-ports",
      parameters = jsonencode({
        authorizedTcpPorts = "80,443"
      }),
      source_identifier = "VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS"
    },
    development-cloudtrail-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "cloudtrail-enabled",
      parameters = jsonencode({
        s3BucketName              = ""
        snsTopicArn               = "",
        cloudWatchLogsLogGroupArn = ""
      }),
      source_identifier = "CLOUD_TRAIL_ENABLED",
    },
    cloudtrail-s3-dataevents-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "cloudtrail-s3-dataevents-enabled",
      parameters = jsonencode({
        S3BucketNames = ""
      }),
      source_identifier = "CLOUDTRAIL_S3_DATAEVENTS_ENABLED"
    },
    cloudwatch-alarm-action-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "cloudwatch-alarm-action-check",
      parameters = jsonencode({
        action1 = "",
        action2 = ""
      }),
      source_identifier = "CLOUDWATCH_ALARM_ACTION_CHECK"
    },
    cloudwatch-alarm-resource-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloudwatch-alarm-resource-check",
      parameters        = "",
      source_identifier = "CLOUDWATCH_ALARM_RESOURCE_CHECK"
    },
    cloudwatch-alarm-settings-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "cloudwatch-alarm-settings-check",
      parameters        = "",
      source_identifier = "CLOUDWATCH_ALARM_SETTINGS_CHECK"
    },
    cloudwatch-log-group-encrypted = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "cloudwatch-log-group-encrypted",
      parameters = jsonencode({
        KmsKeyId = ""
      }),
      source_identifier = "CLOUDWATCH_LOG_GROUP_ENCRYPTED"
    },
    db-instance-backup-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "db-instance-backup-enabled",
      parameters = jsonencode({
        backupRetentionPeriod = "",
        preferredBackupWindow = "",
        checkReadReplicas     = ""
      }),
      source_identifier = "DB_INSTANCE_BACKUP_ENABLED"
    },
    ec2-instance-no-public-ip = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "ec2-instance-no-public-ip",
      parameters        = "",
      source_identifier = "EC2_INSTANCE_NO_PUBLIC_IP"
    },
    elb-acm-certificate-required = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elb-acm-certificate-required",
      parameters        = "",
      source_identifier = "ELB_ACM_CERTIFICATE_REQUIRED"
    },
    elb-custom-security-policy-ssl-check = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elb-custom-security-policy-ssl-check",
      parameters        = "",
      source_identifier = "ELB_CUSTOM_SECURITY_POLICY_SSL_CHECK"
    },
    elb-deletion-protection-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "elb-deletion-protection-enabled",
      parameters        = "",
      source_identifier = "ELB_DELETION_PROTECTION_ENABLED"
    },
    elb-logging-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "elb-logging-enabled",
      parameters = jsonencode({
        s3BucketNames = "",
      }),
      source_identifier = "ELB_LOGGING_ENABLED"
    },
    iam-policy-blacklisted-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "iam-policy-blacklisted-check",
      parameters = jsonencode({
        policyArns    = "",
        exceptionList = ""
      }),
      source_identifier = "IAM_POLICY_BLACKLISTED_CHECK"
    },
    iam-policy-in-use = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "iam-policy-in-use",
      parameters = jsonencode({
        policyARN       = "",
        policyUsageType = ""
      }),
      source_identifier = "IAM_POLICY_IN_USE"
    },
    iam-policy-no-statements-with-admin-access = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "iam-policy-no-statements-with-admin-access",
      parameters        = "",
      source_identifier = "IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS"
    },
    iam-user-group-membership-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "iam-user-group-membership-check",
      parameters = jsonencode({
        groupName = ""
      }),
      source_identifier = "IAM_USER_GROUP_MEMBERSHIP_CHECK"
    },
    internet-gateway-authorized-vpc-only = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "internet-gateway-authorized-vpc-only",
      parameters = jsonencode({
        AuthorizedVpcIds = ""
      }),
      source_identifier = "INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY"
    },
    lambda-concurrency-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "lambda-concurrency-check",
      parameters = jsonencode({
        ConcurrencyLimitLow  = "",
        ConcurrencyLimitHigh = ""
      }),
      source_identifier = "LAMBDA_CONCURRENCY_CHECK"
    },
    lambda-dlq-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "lambda-dlq-check",
      parameters = jsonencode({
        dlqArns = ""
      }),
      source_identifier = "LAMBDA_DLQ_CHECK"
    },
    lambda-inside-vpc = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "lambda-inside-vpc",
      parameters = jsonencode({
        subnetId = ""
      }),
      source_identifier = "LAMBDA_INSIDE_VPC"
    },
    rds-enhanced-monitoring-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "rds-enhanced-monitoring-enabled",
      parameters        = "",
      source_identifier = "RDS_ENHANCED_MONITORING_ENABLED"
    },
    rds-storage-encrypted = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "rds-storage-encrypted",
      parameters = jsonencode({
        kmsKeyId = ""
      }),
      source_identifier = "RDS_STORAGE_ENCRYPTED"
    },
    restricted-common-ports = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "restricted-common-ports",
      parameters = jsonencode({
        blockedPort1 = "",
        blockedPort2 = "",
        blockedPort3 = "",
        blockedPort4 = "",
        blockedPort5 = ""
      }),
      source_identifier = "RESTRICTED_INCOMING_TRAFFIC"
    },
    s3-bucket-logging-enabled = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "s3-bucket-logging-enabled",
      parameters = jsonencode({
        targetBucket = "",
        targetPrefix = ""
      }),
      source_identifier = "S3_BUCKET_LOGGING_ENABLED"
    },
    s3-bucket-policy-grantee-check = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "s3-bucket-policy-grantee-check",
      parameters = jsonencode({
        awsPrincipals     = "",
        servicePrincipals = "",
        federatedUsers    = "",
        ipAddresses       = "",
        vpcIds            = ""
      }),
      source_identifier = "S3_BUCKET_POLICY_GRANTEE_CHECK"
    },
    s3-bucket-policy-not-more-permissive = {
      description = "Config rule, generated by terraform from opg-org-infra",
      name        = "s3-bucket-policy-not-more-permissive",
      parameters = jsonencode({
        controlPolicy = ""
      }),
      source_identifier = "S3_BUCKET_POLICY_NOT_MORE_PERMISSIVE"
    },
    service-vpc-endpoint-enabled = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "service-vpc-endpoint-enabled",
      parameters        = "",
      source_identifier = "SERVICE_VPC_ENDPOINT_ENABLED"
    },
    vpc-vpn-2-tunnels-up = {
      description       = "Config rule, generated by terraform from opg-org-infra",
      name              = "vpc-vpn-2-tunnels-up",
      parameters        = "",
      source_identifier = "VPC_VPN_2_TUNNELS_UP"
    }
  }
}
